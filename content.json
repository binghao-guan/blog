{"meta":{"title":"技术博客","subtitle":"h5技术博客","description":"h5, javascript, typescript, web,","author":"binghao.guan","url":"https://binghao-guan.github.io/blog","root":"/blog/"},"pages":[],"posts":[{"title":"响应式图片","slug":"响应式图片","date":"2019-08-14T05:57:07.000Z","updated":"2019-08-28T11:28:47.503Z","comments":true,"path":"2019/08/14/响应式图片/","link":"","permalink":"https://binghao-guan.github.io/blog/2019/08/14/响应式图片/","excerpt":"","text":"用来在不同的尺寸的设备上提供不同的图片，具体看下面的例子：下面的网站为pc上的页面，如果不使用响应式图片，在小屏幕如手机上看时，中间的人物会很小，并且无法看清人脸，图像留白太多。 下面的为优化后的，当屏幕设备比较小时，显示大图的剪裁版，以便可以看清人像。 picture元素12345&lt;picture&gt; &lt;source media=\"(min-width: 800px)\" srcset=\"head.jpg, head-2x.jpg 2x\"&gt; &lt;source media=\"(min-width: 450px)\" srcset=\"head-small.jpg, head-small-2x.jpg 2x\"&gt; &lt;img src=\"head-fb.jpg\" srcset=\"head-fb-2x.jpg 2x\" alt=\"a head carved out of wood\"&gt;&lt;/picture&gt; 以上为具体用法，&lt;picture&gt;元素通过包含零或多个source 元素和一个img元素来为不同的显示场景提供图像版本。浏览器会选择最匹配的子 &lt;source&gt; 元素，如果没有匹配的，就选择 &lt;img&gt; 元素的 src 属性中的URL。然后，所选图像呈现在&lt;img&gt;元素占据的空间中。 serset属性1234567&lt;img srcset=\"elva-fairy-320w.jpg 320w, elva-fairy-480w.jpg 480w, elva-fairy-800w.jpg 800w\" sizes=\"(max-width: 320px) 280px, (max-width: 480px) 440px, 800px\" src=\"elva-fairy-800w.jpg\" alt=\"Elva dressed as a fairy\"&gt; srcset属性用来设置在不同的分辨率中显示的图像，srcset属性为一组由逗号分隔的字符串组成，其中字符串由以下组成： 一个图片名 一个空格 图像的固有宽度（以像素为单位）这里用的是图片的宽度，单位是w，数字为图片的实际宽度 sizes定义了我们允许浏览器选择的兔相机，以及每个图像的大小。在每个逗号之前，我们写： 一个媒体条件 一个空格 当媒体条件为真时，图像将填充的槽的宽度（440px）。 以上srcset属性的空格后配合sizes共同完成不同分辨率的加载，具体流程为当图片加载时，浏览器会： 查看设备宽度。 检查sizes列表中那个媒体条件是第一个为真 查看给予该媒体查询的槽的大小 加载srcset列表中引用的最接近所选的槽大小的图像。所以，如果支持浏览器以视窗宽度为480px来加载页面，那么(max-width: 480px)的媒体条件为真，因此440px的槽会被选择，所以elva-fairy-480w.jpg将加载，因为它的的固定宽度（480w）最接近于440px。800px的照片大小为128KB而480px版本仅有63KB大小—节省了65KB。现在想象一下，如果这是一个有很多图片的页面。使用这种技术会节省移动端用户的大量带宽。 老旧的浏览器不支持这些特性，它会忽略这些特征。并继续正常加载 src属性引用的图像文件。 如果希望支持多种分辨率显示，但希望每个人在屏幕上看到的图片的实际尺寸是相同的，你可以让浏览器通过srcset和x语法结合——一种更简单的语法——而不用sizes，来选择适当分辨率的图片。 1234&lt;img srcset=\"elva-fairy-320w.jpg, elva-fairy-480w.jpg 1.5x, elva-fairy-640w.jpg 2x\" src=\"elva-fairy-640w.jpg\" alt=\"Elva dressed as a fairy\"&gt; 123img &#123; width: 320px;&#125; 在这种情况下，sizes并不需要——浏览器只是计算出正在显示的显示器的分辨率，然后提供srcset引用的最适合的图像。因此，如果访问页面的设备具有标准/低分辨率显示，一个设备像素表示一个CSS像素，elva-fairy-320w.jpg会被加载（1x 是默认值，所以你不需要写出来）。如果设备有高分辨率，两个或更多的设备像素表示一个CSS像素，elva-fairy-640w.jpg 会被加载。640px的图像大小为93KB，320px的图像的大小仅仅有39KB。","categories":[{"name":"网站优化","slug":"网站优化","permalink":"https://binghao-guan.github.io/blog/categories/网站优化/"}],"tags":[]},{"title":"出色的移动网站","slug":"出色的移动网站","date":"2019-08-07T05:56:09.000Z","updated":"2019-08-28T11:28:47.500Z","comments":true,"path":"2019/08/07/出色的移动网站/","link":"","permalink":"https://binghao-guan.github.io/blog/2019/08/07/出色的移动网站/","excerpt":"","text":"###首页和导航 让吸引注意力的元素前置居中 将用户所有最常见的任务安排在便于用户访问的位置。 通过菜单或“首屏线以下空间”（网页中不向下滚动便无法看到的部分）提供二级任务。 让菜单保持简短和亲切移动用户没有耐心通过浏览冗长的选项列表查找自己需要的内容。 简化返回首页的操作用户期望在其点按移动页面左上角的徽标时能够返回首页，如果未提供该徽标或者徽标不起作用，会令他们感到失望。 别让推广信息喧宾夺主大型应用安装插页广告（例如，隐藏内容并提示用户安装应用的整页推广信息）令用户反感，让他们难以执行任务。除了让用户反感外，使用应用安装插页广告的网站还无法通过 Google 移动易用性测试，这可能对其搜索排名产生不良影响。 网站搜索让网站搜索可见寻找信息的用户通常求助于搜索，因此搜索字段应是他们在您的页面上率先看到的内容。 不要将搜索框隐藏在菜单中。 确保网站搜索结果相关别让用户为了查找要寻找的内容而浏览多个页面的结果。 通过自动完成查询、更正错误拼写和提供相关查询建议简化用户的搜索操作。 为免于重复劳动，可以考虑使用 Google 自定义搜索之类的稳健产品。 实现过滤条件来缩小结果范围研究参与者依靠过滤条件查找他们要寻找的内容，他们会放弃不提供有效过滤条件的网站。对搜索结果应用过滤条件，通过显示应用特定过滤条件时将会返回多少结果来帮助用户。 引导用户获得更相关的网站搜索结果对于具有多样化客户群的网站，请先提出几个问题，然后再呈现搜索框，并利用客户的回答作为搜索查询过滤条件来确保用户获得来自最相关客户群的结果。\\ 商务和转化让用户先探索、后表态研究参与者对那些要求先行注册才能查看内容的网站感到失望，尤其是在他们不熟悉网站品牌的情况下。 尽管对您的业务而言客户信息不可或缺，但过早索要可能导致注册量减少。 让用户以访客身份购买研究参与者对访客结账的看法是“方便”、“简单”、“轻松”和“快速”。 用户对购物时强制他们注册帐号的网站感到恼火，尤其是在注册帐号的好处并不明确的情况下。 利用现有信息最大限度提高便利性为注册用户记忆并预填首选项。为新用户提供熟悉的第三方结账服务。 为复杂任务使用点击呼叫按钮在具备呼叫能力的设备上，点击呼叫链接可让用户通过简单地触按链接来拨打电话。在大多数移动设备上，用户会在拨号前收到确认，或者为用户提供一个菜单，询问用户应如何处理号码。 为在其他设备上完成任务提供便利用户经常想在其他设备上完成任务。例如，他们可能想在更大的屏幕上查看某个项目。 或者他们可能工作繁忙，需要稍后完成任务。 通过让用户能够在社交网络上分享项目，或允许用户直接在网站内通过电子邮件向自己发送链接，为这些客户之旅提供支持。 表单输入精简信息输入用户按回车键时自动前进到下一字段。一般而言，用户必须执行的触按越少，体验越佳。 选择最简单的输入为每个情境使用最合适的输入类型。 使用 datalist 之类的元素为字段提供建议值。 为日期选择提供可视化日历明确标示开始日期和结束日期。用户应不必单纯为了安排日期而离开网站去查看日历应用。 通过标示和实时验证最大限度减少表单错误正确标示输入并实时验证输入。 设计高效的表单充分利用自动填充，让用户能借助预填充的数据轻松填写表单。 使用已知信息预先填充字段。 例如，在检索收货和账单地址时，尝试使用 requestAutocomplete，或让用户能够将其收货地址复制到其账单地址（反之亦然）。 易用性和机型对您的整个网站进行移动优化使用可随用户设备的尺寸和能力而变化的自适应布局。 研究参与者发现混合使用桌面和移动优化页面的网站甚至比单纯使用桌面页面的网站还要难以使用。 别让用户进行捏拉缩放用户对垂直滚动网站感到顺手，水平滚动则不然。 避免使用大型、固定宽度的元素。利用 CSS 媒体查询为不同屏幕应用不同的样式。不要创建只能在特定视口宽度下正常显示的内容。强制用户水平滚动的网站无法通过 Google 移动易用性测试，可能对其搜索排名产生不良影响。 让产品图像可扩展零售客户期望网站允许其查看产品的高分辨率特写。研究参与者对无法查看所购买的产品感到失望。 告诉用户哪个方向效果最好研究参与者往往一直使用同一屏幕方向，直至系统提示其进行切换。 同时采用横向和纵向设计，或鼓励用户切换至最佳方向。 确保即使用户忽略切换方向的建议，仍可完成您的重要行为召唤。 将您的用户留在单一浏览器窗口内用户可能难以在窗口之间切换，并且可能找不到返回网站的路径。 避免启动新窗口的行为召唤。识别任何可能导致用户离开您的网站的流程，并提供相应功能将他们留在您的网站上。例如，如果您接受优惠券，请直接在网站上提供，而不要让用户被迫前往其他网站寻找优惠。 避免使用“完整网站”标示当研究参与者看到用于切换“完整网站”（即桌面网站）和“移动网站”的选项时，会认为移动网站缺少内容而改为选择“完整”网站，这会将他们导向桌面网站。 明确您为何需要用户的位置用户应始终明了您为何索要其位置。 研究参与者试图预订其他城市的酒店，而旅行网站却在检测到其位置后改为提供其所在城市的酒店，这令他们感到困惑。默认情况下将位置字段留空，让用户通过“Find Near Me”之类的明确行为召唤选择填充这些字段。 怎样才算出色的移动网站 Jenny Govedevelopers.google.com/web/fundamentals/design-and-ux/principles","categories":[],"tags":[{"name":"移动网站","slug":"移动网站","permalink":"https://binghao-guan.github.io/blog/tags/移动网站/"}]},{"title":"双钻石设计模型","slug":"双钻石设计模型","date":"2019-08-07T02:29:00.000Z","updated":"2019-08-28T11:28:47.500Z","comments":true,"path":"2019/08/07/双钻石设计模型/","link":"","permalink":"https://binghao-guan.github.io/blog/2019/08/07/双钻石设计模型/","excerpt":"","text":"英国设计协会开创的”双钻石”设计流程模式，其步骤涉及以下项目阶段：理解、定义、分散、决定、开发原型和验证。 确定挑战声明首先要从当前的根本性挑战着手，像提案一样把它写出来，并且要问自己:”我实际试图解决的是什么问题?”。挑战声明是为项目编写的简报，其中需要包含目标。 挑战可能是已有项目的优化功能，也可能是一款全新的产品。无论是什么任务，只需调整声明的措辞，使之适合需要达到的目标。声明应该与团队目标相关联、以受众为中心、具有鼓舞性并且言辞简洁。以下是一些例子: 优化网页的首屏加载速度 优化代码，简化项目结构 更新挑战声明编写了若干版本后的目标后，将其提交给团队以形成共识。最好加入一个期限，因为这有助于团队集中精力解决问题。因此，对于以上所列的实例，可能需要作出下列调整： 1个月内把图片改为响应式图片 15天内更改现有css，全部改为BEM风格 完成挑战声明后，将其展示在醒目位置，以便工作时能够看到。以便不断的查阅声明内容，并在整个项目进行过程中对其更新或修改。 确认挑战（验证问题）下一步是研究挑战和了解问题的相关情况。确定团队对问题的理解是否有效。因为一搬我们是从自己的角度看待问题，这样做很危险，因为大多数像我们这样的科技人员实际上超级用户，只是用户群体中的少数。我们是享有发言权的少数派，可能会愚蠢地认为存在某种问题，而事实并非如此。 项目规划图由于参与人员是有不同类型的人员组成，需要详细列出每个参与者及其目标，并写下每个参与者需要完成的步骤数量 项目规划图对每个用户或参与者在流程中的主要步骤作出规划。 项目规划图对每个用户或参与者在流程中的主要步骤作出规划。得到的项目规划图包含流程中的主要步骤。可以将其视为不包含过多细节的项目概览。 团队成员还可通过它来判断规划图是否与挑战声明一致。 稍后，当您分解每个步骤时，可以获得更多详情。 但项目规划图暂时只能对用户完成最终目标所需执行的步骤进行高层次分解。","categories":[{"name":"用户体验基础知识","slug":"用户体验基础知识","permalink":"https://binghao-guan.github.io/blog/categories/用户体验基础知识/"}],"tags":[]},{"title":"通过Audit优化网站加载速度","slug":"网站优化","date":"2019-07-31T09:16:17.000Z","updated":"2019-08-28T11:28:47.511Z","comments":true,"path":"2019/07/31/网站优化/","link":"","permalink":"https://binghao-guan.github.io/blog/2019/07/31/网站优化/","excerpt":"","text":"不使用延迟首次回执的资源浏览器进行渲染时，需要构建渲染树，而渲染树由DOM树和CSSOM树组成。之后浏览器根据渲染树计算每个可见元素的布局，并输出给绘制流程，然后将像素渲染到屏幕上。HTML和CSS都是阻塞渲染的资源。HTML显然是必要的，因为如果没有DOM，我们就没有可以渲染的内容，但CSS的必要性就不太明显。 阻塞渲染是指浏览器是否需要暂停网页的首次渲染，直至该资源准备就绪。无论哪一种情况，浏览器仍会下载CSS资产，只不过不阻塞渲染的资源优先级较低罢了。 默认情况下，CSS被视为阻塞资源。我们可以通过媒体查询将一些CSS资源标记为不阻塞渲染，及使用media属性控制 css 通过media属性进行媒体查询，只加载符合media的css 参考阻塞渲染的css","categories":[{"name":"网站优化","slug":"网站优化","permalink":"https://binghao-guan.github.io/blog/categories/网站优化/"}],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-07-25T11:48:18.523Z","updated":"2019-07-25T11:48:18.523Z","comments":true,"path":"2019/07/25/hello-world/","link":"","permalink":"https://binghao-guan.github.io/blog/2019/07/25/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"我的第一遍博客\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}